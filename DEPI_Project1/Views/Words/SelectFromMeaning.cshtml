@model object
@{
    ViewData["Title"] = "Select From Definitions";
}

<h1>Select From Definitions</h1>
<h4>Word: @ViewBag.WordText</h4>
<hr />

<!-- Search Form -->
<div class="row mb-4">
    <div class="col-md-6">
        <form method="get">
            <input type="hidden" name="wordId" value="@ViewBag.WordId" />
            <div class="input-group">
                <input type="text" name="search" class="form-control" placeholder="Search definitions by text or associated words..." value="@ViewBag.SearchText" autofocus>
                <button class="btn btn-outline-secondary" type="submit">
                    <i class="fas fa-search"></i> Search
                </button>
                @if (!string.IsNullOrEmpty(ViewBag.SearchText))
                {
                    <a href="@Url.Action("SelectFromMeaning", new { wordId = ViewBag.WordId })" class="btn btn-outline-secondary">
                        <i class="fas fa-times"></i> Clear
                    </a>
                }
            </div>
        </form>
    </div>
</div>

<!-- Available Meanings -->
@if (ViewBag.AvailableMeanings != null && ((List<Meaning>)ViewBag.AvailableMeanings).Any())
{
    <div class="card">
        <div class="card-header">
            <h5>Available Parent Definitions (@((List<Meaning>)ViewBag.AvailableMeanings).Count)</h5>
            <small class="text-muted">Only parent definitions are shown (no sub-definitions)</small>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Definition Text</th>
                            <th>Language</th>
                            <th>Associated Words Count</th>
                            <th>Matching Words</th>
                            <th>Notes</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var meaning in (List<Meaning>)ViewBag.AvailableMeanings)
                        {
                            <tr>
                                <td>
                                    <strong>
                                        @if (meaning.MeaningText?.Length > 100)
                                        {
                                            @meaning.MeaningText.Substring(0, 100)

                                            <text>...</text>
                                        }
                                        else
                                        {
                                            @(meaning.MeaningText ?? "[No text]")
                                        }
                                    </strong>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(meaning.Language))
                                    {
                                        <span class="badge bg-secondary">@meaning.Language</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not specified</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-info">@(meaning.WordMeanings?.Count ?? 0) words</span>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(ViewBag.SearchText as string) && meaning.WordMeanings != null)
                                    {
                                        var searchText = ViewBag.SearchText.ToString().ToLowerInvariant();
                                        var matchingWords = meaning.WordMeanings
                                        .Where(wm => wm.Word != null && wm.Word.Word_text.ToLowerInvariant().Contains(searchText))
                                        .Take(3)
                                        .ToList();

                                        if (matchingWords.Any())
                                        {
                                            <small class="text-success">
                                                @string.Join(", ", matchingWords.Select(wm => wm.Word.Word_text))
                                                @if (meaning.WordMeanings.Count(wm => wm.Word != null && wm.Word.Word_text.ToLowerInvariant().Contains(searchText)) > 3)
                                                {
                                                    <text>... (+@(meaning.WordMeanings.Count(wm => wm.Word != null && wm.Word.Word_text.ToLowerInvariant().Contains(searchText)) - 3) more)</text>
                                                }
                                            </small>
                                        }
                                        else if (meaning.MeaningText != null && meaning.MeaningText.ToLowerInvariant().Contains(searchText))
                                        {
                                            <small class="text-info">
                                                <i class="fas fa-search"></i> Found in definition text
                                            </small>
                                        }
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(meaning.Notes))
                                    {
                                        if (meaning.Notes.Length > 50)
                                        {
                                            <small class="text-muted" title="@meaning.Notes">
                                                @meaning.Notes.Substring(0, 50)...
                                            </small>
                                        }
                                        else
                                        {
                                            <small class="text-muted">@meaning.Notes</small>
                                        }
                                    }
                                </td>
                                <td>
                                    <form asp-action="AddMeaningToWord" method="post" style="display:inline;">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="wordId" value="@ViewBag.WordId" />
                                        <input type="hidden" name="meaningId" value="@meaning.ID" />
                                        <button type="submit" class="btn btn-success btn-sm"
                                                onclick="return confirm('Link this definition to the word?');">
                                            <i class="fas fa-link"></i> Link Definition
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i>
        @if (string.IsNullOrEmpty(ViewBag.SearchText as string))
        {
            <text>Please enter a search term to find definitions.</text>
        }
        else
        {
            <text>No parent definitions found matching your search criteria "@ViewBag.SearchText".</text>
        }
        <br>
        <small class="text-muted">Only parent definitions are searched (no sub-definitions).</small>
    </div>
}

<div class="mt-3">
    <a asp-action="Details" asp-route-id="@ViewBag.WordId" class="btn btn-secondary">
        <i class="fas fa-arrow-left"></i> Back to Word Details
    </a>
    <a asp-action="CreateMeaning" asp-route-wordId="@ViewBag.WordId" class="btn btn-primary">
        <i class="fas fa-plus"></i> Create New Definition
    </a>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Auto-submit on Enter key in search
            $('input[name="search"]').on('keypress', function(e) {
                if (e.which === 13) {
                    $(this).closest('form').submit();
                }
            });

            // Confirmation with more context
            $('form[asp-action="AddMeaningToWord"] button').on('click', function(e) {
                var meaningText = $(this).closest('tr').find('td:first strong').text();
                var truncatedText = meaningText.length > 50 ? meaningText.substring(0, 50) + '...' : meaningText;

                if (!confirm(`Are you sure you want to link this definition to the word?\n\nDefinition: "${truncatedText}"`)) {
                    e.preventDefault();
                }
            });
        });
    </script>

    <style>
        .table td {
            vertical-align: middle;
        }

        .table tr:hover {
            background-color: #f8f9fa;
        }

        .card {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .input-group .btn {
            border-left: none;
        }

        .badge {
            font-size: 0.75em;
        }
    </style>
}

@* @model WordMeaning

@{
    ViewData["Title"] = "Select From Definitions";
}

<h1>Select From Definitions</h1>

<div class="row">
    <div class="col-md-10">  <!-- Changed from col-md-4 to col-md-8 -->
        <!-- Search Input -->
        <div class="form-group">
            <label for="searchMeaning" class="control-label">Search Definitions</label>
            <input type="text" id="searchMeaning" class="form-control" placeholder="Type to search..." />
        </div>

        <form asp-action="SelectFromMeaning" asp-route-wordId="@ViewBag.WordId">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Dropdown for selecting existing meanings -->
            <div class="form-group">
                <label for="MeaningID" class="control-label">Select Existing Meaning</label>
                <select asp-for="MeaningID" 
                        class="form-control" 
                        id="MeaningID" 
                        asp-items="ViewBag.Meanings"
                        size="15"
                        style="height: auto; max-height: 250px; width: 150%; font-size: 1.1em; padding: 8px; min-width: 800px; white-space: nowrap; overflow-x: auto;">
                    <option value="">-- Select Definition --</option>
                </select>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Details" asp-route-id="@ViewBag.WordId">Back to Word Details</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            // Add custom styling to the select options
            $('#MeaningID option').css({
                'padding': '8px',
                'margin': '2px 0',
                'border-bottom': '1px solid #eee',
                'white-space': 'nowrap'
            });

            // Existing search functionality
            $('#searchMeaning').on('input', function () {
                var searchText = $(this).val().toLowerCase();
                $('#MeaningID option').each(function () {
                    var optionText = $(this).text().toLowerCase();
                    if (optionText.includes(searchText)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
                $('#MeaningID').trigger('change');
            });
        });
    </script>
} *@